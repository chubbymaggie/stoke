##### /home/berkeley/stoke/bin/stoke_search

##### Search Options:

--add_nops_mass 1
--delete_mass 1
--opcode_width_mass 1
# Instruction move proposal mass
# --instruction_mass <int>
# Default: 1

# Opcode move proposal mass
# --opcode_mass <int>
# Default: 1

# Operand move proposal mass
# --operand_mass <int>
# Default: 1

# Local swap move proposal mass
# --local_swap_mass <int>
# Default: 1
#--local_swap_mass 3

# Global swap move proposal mass
# --global_swap_mass <int>
# Default: 1

# Resize move proposal mass
# --resize_mass <int>
# Default: 1
#--resize_mass 0

# Extension move proposal mass
# --extension_mass <int>
# Default: 0

# Number of proposals to execute before giving up
# --timeout <int>
# Default: 1000000000
--cycle_timeout 500000
--timeout_iterations 0
--timeout_seconds 0

# Number of proposals to execute per round (requires --timeout_action list)
# --timeout_list { <int> <int> ... }
# Default: { 10000 10000 10000 10000 10000 10000 10000 100000 100000 100000 1000000 }

# Maximum runtime (in seconds) before giving up
# --timeout_sec <int>
# Default: 1800
#--timeout_sec 300

--failed_verification_action add_counterexample

# Annealing constant
# --beta <double>
# Default: 1
--beta 1

# The maximum number of instructions allowed in a rewrite
# --max_instrs <int>
# Default: 16

# Initial search state
# --init (empty|zero|target|previous|extension)
# Default: zero
--init target

##### Target Options:

# Target code
# --target <path/to/file.s>
--target target.s

##### Cost Function Evaluation Options:

# Give up once cost exceeds this value
# --max_cost <int>
# Default: 4611686018427387903

# The cost function.  Can be an arbitrary expression involving the following constructs:
# - arithmetic operators: + - * / % == << >> < > >= <= & |
# - binsize: Size of the binary
# - correctness: Correctness according to the testcases
# - latency: Latency of the instructions
# - measured: Measured latency (more precise for loops than 'latency')
# - size: The number of instructions
# - sseavx: 1 if both sse and avx instructions are used, 0 otherwise
# --cost <string>
# Default: "correctness+latency"
--restricted_reg_penalty 100
--cost "correctness*1000000 + (nacl2 <= 5)*nacl2 + (nacl2 > 5)*nacl2*25 + measured"

# Expression to check if code is correct
# --correctness <string>
# Default: "correctness == 0"
--correctness "nacl2+correctness == 0"

##### Correctness Options:

# Metric for measuring distance between states
--distance doubleword
# Default: hamming

# Reduction method
# --reduction (max|sum|extension)
# Default: sum

# Number of bytes in sse elements
# --sse_width (1|2|4|8)
# Default: 8

# Number of values in sse registers
# --sse_count <int>
# Default: 4

# Disallow correct values in incorrect register locations
# --no_relax_reg 

# Allow correct values in incorrect memory locations
# --relax_mem 

# Enables an optimized version of relax_mem that assumes heap writes occur in 128-bit blocks
# --blocked_heap_opt 

# Penalty for correct values in incorrect locations
# --misalign_penalty <int>
# Default: 1

# Penalty for incorrect signal behavior
# --sig_penalty <int>
# Default: 10000

# Minimum ULP value to record
# --min_ulp <int>
# Default: 0

# Add penalty if assembled rewrite exceeds this size. (when non-zero)
# --max_size_bytes <int>
# Default: 0

# The one-time cost for having a rewrite too large.
# --max_size_base_penalty <int>
# Default: 0

# The cost per bytes for having a rewrite too large.
# --max_size_linear_penalty <int>
# Default: 0

##### Input/Output Register/Memory Options:

# Registers defined on entry
# --def_in { %rax %rsp ... }
# Default: { %rax %rcx %rdx %rsi %rdi %r8 %r9 %xmm0 %xmm1 %xmm2 %xmm3 %xmm4 %xmm5 %xmm6 %xmm7 }
--def_in "{ %rsp %r15 %rdi %rsi %rdx }"

# Registers live on exit
# --live_out { %rax %rsp ... }
# Default: { %rax %rdx %xmm0 %xmm1 }
--live_out "{ %rax %rsp }"

# Is stack defined on exit?
# --stack_out 

# Is heap defined on exit?
--heap_out 

# Remove the default rounding control bit (%mxcsr[rc]) from def_in
# --no_default_mxcsr 

##### "latency" Cost Function Options:

# Latency multiplier for nested code
# --nesting_penalty <int>
# Default: 5
--nesting_penalty 1024

##### Auxiliary Function Options:

# Directory containing helper functions
# --functions <path/to/dir>

# Automatically remove target and unreachable functions from functions directory

##### Sandbox Options:

# Report SIGSEGV for abi violations
# --abi_check 

# Report SIGSEGV for stack smashing violations
# --stack_check 

# Maximum jumps before exit due to infinite loop
# --max_jumps <int>
# Default: 1024
--max_jumps 4096

##### Search State Options:

# Initial rewrite; used with --init previous
# --previous <path/to/file.s>

##### Random Seed Options:

# Random seed for stoke tools; set to zero for random
# --seed <int>
# Default: 0

##### Formal Validator Options:

# SMT Solver backend
# --solver (cvc4|z3)
# Default: cvc4

# Timeout in milliseconds for SMT solver before giving up.  0 for no limit.
# --solver_timeout <int>
# Default: 0

##### Testcase Options:

# Testcases
# --testcases <path/to/file>
--testcases testcases

# Shuffle testcase ordering
# --shuffle_testcases 

# Subset of testcase indices to use for training sets
# --training_set { 0 1 ... 9 }
--training_set "{ 0 1 2 3 40 41 42 43 80 81 82 83 84 120 121 122 160 200 }"
# Default: { 0 ... 9999 }

# Subset of testcase indices to use for test sets
# --test_set { 0 1 ... 9 }
# Default: { 0 ... 9999 }

# Testcase index
# --index <int>
# Default: 0

##### Transform Options:

# Propose instruction and opcode moves that use this CPU ID flag set
# --cpu_flags { flag1 flag2 ... flagn }
# Default: { fpu tsc msr cx8 sep cmov clflush mmx fxsr sse sse2 syscall rdtscp rep_good nopl pni pclmulqdq monitor ssse3 fma cx16 sse4_1 sse4_2 movbe popcnt aes xsave avx f16c rdrand lahf_lm abm xsaveopt fsgsbase bmi1 hle avx2 bmi2 erms invpcid rtm }
--cpu_flags "{ }"

# Don't propose any instructions from this set (takes precedence over --opc_whitelist)
# --opc_blacklist { opcode1 ... opcoden; e.g., xorl or xorl_r32_r32 }
# Default: { }
--opc_blacklist "{ prefetch* cmc stc clc lfence leaveq mfence sfence cbtw clt* cld crc32* cwt*  pause imul* emms set* cmpxchg* crc32* adc* sbb* xchg* idiv* xadd* rol* rcl* ror* rcr* bswap div* ver* bsr* bsf* mul* btr* bts* bt* cmp* test* j* ud2 cqt* shrd* cpuid* xlat* callq* sti cli }"

# Only proprose instructions from this set (unless they are not proposed for other reasons, e.g. --opc_blacklist, --propose_call, --cpu_flags, --force_mem_read, --force_mem_write, instructions not supported by stoke, etc.); empty whitelist means no whitelist
# --opc_whitelist { opcode1 ... opcoden; e.g., xorl or xorl_r32_r32 }
--opc_whitelist "{ }"

# Number of additional call opcodes in the opcode pool
# --call_weight <int>
# Default: 0
--call_weight 0

# Override the value of preserve_regs to the empty set
# --callee_save 

# Only propose rewrites that the STOKE formal validator can support
--validator_must_support 

# Prevent STOKE from proposing instructions that modify these registers
# --preserve_regs { %rax %rsp ... }
# Default: { %rbx %rsp %rbp %r12 %r13 %r14 %r15 }
#--preserve_regs "{ %rbx %rsp %rbp %r15 %r12 %r13 %r14 }"
--preserve_regs "{ %rsp %rbx %rbp %r12 %r13 %r14 %r15 %xmm0 %xmm1 %xmm2 %xmm3 %xmm4 %xmm5 %xmm6 %xmm7 %xmm8 %xmm9 %xmm10 %xmm11 %xmm12 %xmm13 %xmm14 %xmm15 }"

# Additional immediates to propose as operands
# --immediates { imm1 imm2 ... }
# Default: { }

# Additional addresses to propose as operands
# --mem_ops { (%rax) (%rdi, %rsp) ... }
--mem_ops "{ (%r15,%rdi,1) (%r15,%rsi,1) -0x1(%r15,%rdi,1) -0x1(%r15,%rsi,1) }"
# Default: { }
# Additional global rip offsets to propose as operands
# --rips { rip1 rip2 ... }
# Default: { }

##### Verifier Options:

# Verification strategy
# --strategy (none|hold_out|formal|extension)
# Default: none
#--strategy hold_out
--strategy "hold_out,bounded"
--bound 2
--alias_strategy "basic"

##### Output Options:

# File to write successful results to
# --out <path/to/file.s>
# Default: "result.s"
--out result.s

##### Statistics Options:

# Number of iterations between statistics updates
# --statistics_interval <int>
# Default: 1000000
--statistics_interval 10000

##### Automation Options:

# Postprocessing of the program found by STOKE (simple removes nops and unreachable blocks, and full additionally removes redundant statements without side-effects)
# --postprocessing (none|simple|full)
# Default: full
--postprocessing nacl

# Don't show a progress update whenever a new best program is discovered
# --no_progress_update 

##### Help and argument utilities:

# Print this message and quit
# --help 

# Print program arguments and quit
# --debug_args 

# Read program args from a configuration file
# --config <path/to/file.conf>

# Print an example configuration file
# --example_config <path/to/file.conf>


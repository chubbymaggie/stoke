##### stoke search config file

--out result.s # Path to write results to

--target ./target.s # Path to the function to optimize
--init zero # Begin search from all nops 

--def_in "{ %xmm0 %rsp %rbp }" # The registers that are defined on entry to the target
--live_out "{ %xmm0 %rsp %rbp }" # The registers that are live on exit from the target

--testcases rip.tc # Path to testcase file
--training_set "{ 0 }" # Testcases to use for measuring correctness during search
--test_set "{ 0 }"  # Testcases to use as holdout set for checking correctness

--cpu_flags "{ sse sse2 }"

--distance hamming # Metric for measuring error between live-outs
--misalign_penalty 1 # Penalty for results that appear in the wrong location
--reduction sum # Method for summing errors across testcases
--sig_penalty 9999 # Score to assign to rewrites that produce non-zero signals
--sse_width 8
--sse_count 1
--cost "100000*correctness + binsize"

--global_swap_mass 1 # Proposal mass
--instruction_mass 1 # Proposal mass
--local_swap_mass 1 # Proposal mass
--opcode_mass 1 # Proposal mass
--operand_mass 1 # Proposal mass
--rotate_mass 1 # Proposal mass
--opcode_width_mass 1
--add_nops_mass 1
--delete_mass 1

--beta 1 # Search annealing constant

--statistics_interval 2000000 # Print statistics every 10k proposals
--timeout_iterations 32000000 # Propose 16m modifications total before giving up
--cycle_timeout 4000000 # Try 1m modifications before restarting

--strategy hold_out # Verify results using a larger hold out testcase set
--postprocessing full
